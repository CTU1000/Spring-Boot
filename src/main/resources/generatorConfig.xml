<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"
        >
<generatorConfiguration>

    <!-- 引入配置文件 -->
    <properties resource="application.properties"/>

    <!--在MBG工作的时候，需要额外加载的依赖包,选择本地硬盘上面的数据库驱动包-->
    <classPathEntry location="D:/Maven Repository/mysql/mysql-connector-java/5.1.38/mysql-connector-java-5.1.38.jar"/>

    <context id="context1" targetRuntime="MyBatis3" defaultModelType="flat">
        <!-- 抑制警告 -->
        <property name="suppressTypeWarnings" value="true"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号 -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- generate entity时，生成hashcode和equals方法 -->
        <!-- <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" /> -->

        <!-- generate entity时，生成serialVersionUID -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>

        <!-- 这个插件只会增加字符串字段映射到一个JDBC字符的方法 -->
        <plugin type="org.mybatis.generator.plugins.CaseInsensitiveLikePlugin"/>

        <!-- genenat entity时,生成toString -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>


        <commentGenerator>
            <!-- 是否去除自动生成的注释 如果生成日期，会造成即使修改一个字段，整个实体类所有属性都会发生变化，不利于版本控制，所以设置为true -->
            <property name="suppressAllComments" value="true"/>
            <!-- 阻止生成的注释包含时间戳，默认为false     true：是 ： false:否 -->
            <property name="suppressDate" value="true"/>
        </commentGenerator>


        <!-- 数据库配置文件的url是不能直接拷贝过来用的，需要把&换成'&amp;' -->
        <jdbcConnection driverClass="${spring.datasource.driver-class-name}"
                        connectionURL="${spring.datasource.url}"
                        userId="${spring.datasource.username}"
                        password="${spring.datasource.password}">
        </jdbcConnection>

        <!-- java类型处理器
            用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl
            注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型
        -->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!-- true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                 false：默认
                 scale>0;length>18：使用BigDecimal
                 scale=0;length[10,18]：使用Long
                 scale=0;length[5,9]：使用Integer
                 scale=0;length<5：使用Short
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成实体的包名和位置 -->
        <!-- generate Model -->
        <javaModelGenerator targetPackage="com.example.demo.entity"
                            targetProject="${project.build.directory}/../../demo/src/main/java">

            <!--如果true，MBG会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。默认为false-->
            <property name="enableSubPackages" value="true"/>
            <!--是否对数据库查询结果进行trim操作-->
            <property name="trimStrings" value="true"/>
            <!--是否对xml追加，默认true,为了重新生成实体可以覆盖原文件改为false-->
            <property name="isMergeable" value="false"/>
        </javaModelGenerator>

        <!-- 生成映射文件的包名和位置 -->
        <!-- generate xml -->
        <sqlMapGenerator targetPackage="mapper"
                         targetProject="${project.build.directory}/../src/main/resources">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>


        <!-- 生成DAO的包名和位置 -->
        <!-- generate Mapper -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="com.example.demo.mapper"
                             targetProject="${project.build.directory}/../src/main/java">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!-- 生成表名tableName 实体名domainObjectName ，schema用来防止重复生成sql.xml-->
        <!--schema查询语句 select table_schema  FROM information_schema.tables  WHERE table_name = 'test_user';  -->
        <table schema="test" tableName="test_user" domainObjectName="User"
               enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               selectByExampleQueryId="false"
        >

            <!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema -->
            <property name="ignoreQualifiersAtRuntime" value="true"/>
            <!--自动生成主键 数据库自增identity="true"-->
            <generatedKey column="id" sqlStatement="MySql" identity="true"></generatedKey>
            <!--
                该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，
                比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；
                那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是
                custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；
                注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，
                如果使用了columnOverride元素，该属性无效；
                -->
            <!--<columnRenamingRule searchString="^CUST_" replaceString=""/>-->


        </table>

        <!--通配符 生成所有表-->
        <!--<table tableName="%">-->
        <!--</table>-->
    </context>
</generatorConfiguration>